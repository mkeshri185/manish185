
import tkinter

import PIL.Image , PIL.ImageTk
import cv2
from functools import partial
import threading
import imutils
import time

stream = cv2.VideoCapture("clip.mp4")
flag = True
def play(speed):
    print(f" You clicked on play and speed is {speed}")
    frame1 = stream.get(cv2.CAP_PROP_POS_FRAMES)
    stream.set(cv2.CAP_PROP_POS_FRAMES , frame1 + speed)
    
    grabbed,frame = stream.read()
    if not grabbed:
        exit()
    frame = imutils.resize(frame , width=SET_WIDTH , height=SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0 , image = frame , anchor = tkinter.NW)
    if flag:
        canvas.create_text(120 , 25 , fill="green" , font= "Times 20 italic bold " , text="DECISION PENDING")
        
    flag= not flag

        
    
def pending(decision):
    # 1 Display decision pending image
    frame = cv2.cvtColor(cv2.imread("PENDING.png") , cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width = SET_WIDTH , height = SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image= PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0 , image = frame , anchor = tkinter.NW)
    
    # 2 wait for 1 sec
    time.sleep(1)
    # 3 Dispaly sponser image
    frame = cv2.cvtColor(cv2.imread("SPONSORE.png") , cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width = SET_WIDTH , height = SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image= PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0 , image = frame , anchor = tkinter.NW)
    # 4 wait for 1.5 sec
    time.sleep(1)
    # 5 Display ouit/ not out image
    if decision == 'out':
        decisionImg = "out.png"
    else:
        decisionImg = "NOT OUT.png"
    frame = cv2.cvtColor(cv2.imread(decisionImg) , cv2.COLOR_BGR2RGB)
    frame = imutils.resize(frame, width = SET_WIDTH , height = SET_HEIGHT)
    frame = PIL.ImageTk.PhotoImage(image= PIL.Image.fromarray(frame))
    canvas.image = frame
    canvas.create_image(0, 0 , image = frame , anchor = tkinter.NW)
    
    
def out():
    thread = threading.Thread(target=pending , args=("out",))
    thread.daemon = 1
    thread.start()
    print("player is out")
    
def not_out():
    thread = threading.Thread(target=pending , args=(" not out" , ))
    thread.daemon = 1
    thread.start()
    print("player is Not out")
     
# Width and height of the main screen
SET_WIDTH = 1000
SET_HEIGHT = 595

#Tkinter starts from here
window = tkinter.Tk()
window.title(" MANISH THIRD UMPIRE DECISION REVIEW SYSTEM KIT")
cv_img = cv2.cvtColor(cv2.imread("WELCOME.png") , cv2.COLOR_BGR2RGB)
canvas = tkinter.Canvas(window , width = SET_WIDTH, height = SET_HEIGHT)
photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(cv_img))
image_on_canvas = canvas.create_image(0 , 0 , ancho = tkinter.NW , image=photo )
canvas.pack()


#buttons to control playback
btn = tkinter.Button(window , text="<< Previous(fast)" , width=80 , command=partial(play , -25))
btn.pack()

btn = tkinter.Button(window , text="<< Previous(slow)" , width=80 , command=partial(play , -2))
btn.pack()

btn = tkinter.Button(window , text=" Next(fast) >>" , width=80  , command=partial(play , 25))
btn.pack()

btn = tkinter.Button(window , text="Next(slow) >>" , width=80 , command=partial(play , 2))
btn.pack()

btn = tkinter.Button(window , text="Give out" , width=80 , command=out)
btn.pack()

btn = tkinter.Button(window , text=" Give Not out" , width=80 , command=not_out)
btn.pack()

window.mainloop()
